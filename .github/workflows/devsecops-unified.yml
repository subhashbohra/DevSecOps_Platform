name: DevSecOps ‚Äì Unified SCA + SAST + AI (Bedrock)

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pull-requests: write 

jobs:
  devsecops:
    runs-on: ubuntu-latest

    env:
      PR_NUMBER: ${{ github.event.pull_request.number }}
      REPO: ${{ github.repository }}
      HEAD_SHA: ${{ github.event.pull_request.head.sha }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install tooling (Trivy, Semgrep, jq, curl)
        run: |
          set -e
          sudo apt-get update
          sudo apt-get install -y wget apt-transport-https gnupg lsb-release jq curl python3-pip
          # Trivy
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install -y trivy
          # Semgrep
          pip3 install --upgrade pip
          pip3 install "semgrep>=1.83.0"

      # ---------- SCA (Trivy) ----------
      - name: Run Trivy scan (SCA)
        run: |
          set -e
          trivy fs --ignore-unfixed --format json --output trivy-results.json .
          # Keep a compact summary for AI (top 10 CVEs)
          jq -r '
            .Results[]
            | select(.Vulnerabilities != null)
            | .Vulnerabilities[]
            | "\(.PkgName)@\(.InstalledVersion) ‚Äî \(.Title) [Severity: \(.Severity)] Fix: \(.FixedVersion // "n/a")"
          ' trivy-results.json | head -n 10 > sca_top.txt || true

      - name: Build SCA Markdown table
        id: sca_table
        run: |
          {
            echo "| Package | Version | CVE | Severity | Reference |"
            echo "|---------|---------|-----|----------|-----------|"
            jq -r '
              .Results[]
              | select(.Vulnerabilities != null)
              | .Vulnerabilities[]
              | "| \(.PkgName) | \(.InstalledVersion) | \(.VulnerabilityID) | \(.Severity) | [Link](\(.PrimaryURL)) |"
            ' trivy-results.json
          } > sca_report.md

          echo "sca<<EOF" >> $GITHUB_OUTPUT
          cat sca_report.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      # ---------- SAST (Semgrep) ----------
      - name: Run Semgrep (SAST)
        run: |
          # Use default CI ruleset; never fail the job, just report
          semgrep --config p/ci --json --quiet --max-target-bytes 20000000 --timeout 120 . > semgrep.json || true
          # Summarize for AI (top 10)
          jq -r '
            .results[]?
            | "File: \(.path) L\(.start.line) ‚Äî \(.extra.message) [Rule: \(.check_id), Severity: \(.extra.severity)]"
          ' semgrep.json | head -n 10 > sast_top.txt || true

      - name: Build SAST Markdown table
        id: sast_table
        run: |
          {
            echo "| File | Line | Rule | Severity | Message |"
            echo "|------|------|------|----------|---------|"
            jq -r '
              .results[]?
              | "| \(.path) | \(.start.line) | \(.check_id) | \(.extra.severity) | \(.extra.message | gsub("\\n"; " ")) |"
            ' semgrep.json
          } > sast_report.md

          echo "sast<<EOF" >> $GITHUB_OUTPUT
          cat sast_report.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      # ---------- Inline PR comments (top SAST findings) ----------
      - name: Inline comments for top SAST findings (up to 10)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e
          # Post at most 10 comments to avoid noise
          count=0
          jq -c '
            .results[]?
            | {path:.path, line:.start.line, message:.extra.message, rule:.check_id, severity:.extra.severity}
          ' semgrep.json | while IFS= read -r item; do
            path=$(echo "$item" | jq -r '.path')
            line=$(echo "$item" | jq -r '.line')
            rule=$(echo "$item" | jq -r '.rule')
            sev=$(echo "$item" | jq -r '.severity')
            msg=$(echo "$item" | jq -r '.message' | tr -d '\r' | head -c 700)

            body="**SAST** (\`$rule\`, $sev): $msg"
            # Create an inline PR comment on the current head commit
            gh api repos/$REPO/pulls/$PR_NUMBER/comments \
              -f body="$body" \
              -f commit_id="$HEAD_SHA" \
              -f path="$path" \
              -f line="$line" || true

            count=$((count+1))
            [ "$count" -ge 10 ] && break
          done

      # ---------- AI Vulnerability Review (Bedrock Titan) ----------
      - name: AI Vulnerability Review (Bedrock Titan)
        id: ai_vuln
        if: ${{ secrets.AWS_ACCESS_KEY_ID != '' && secrets.AWS_SECRET_ACCESS_KEY != '' && secrets.AWS_REGION != '' }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          SCA_TEXT=$(cat sca_top.txt 2>/dev/null || echo "No SCA items captured.")
          jq -n --arg sca "$SCA_TEXT" \
            '{
              inputText: "You are a security assistant. Explain the following dependency vulnerabilities in plain language, business impact, and the exact fix version(s). Make it concise and bullet-pointed.\n\nTop SCA findings:\n" + $sca,
              textGenerationConfig: { maxTokenCount: 700, temperature: 0.3, topP: 0.9 }
            }' > bedrock_sca_prompt.json

          aws bedrock-runtime invoke-model \
            --region "$AWS_REGION" \
            --model-id amazon.titan-text-lite-v1 \
            --body fileb://bedrock_sca_prompt.json \
            bedrock_sca_response.json

          echo "ai_sca<<EOF" >> $GITHUB_OUTPUT
          jq -r '.results[0].outputText' bedrock_sca_response.json || echo "AI explanation not available"
          echo "EOF" >> $GITHUB_OUTPUT

      # ---------- AI Static Code Review (Bedrock Titan) ----------
      - name: AI Static Code Review (Bedrock Titan)
        id: ai_code
        if: ${{ secrets.AWS_ACCESS_KEY_ID != '' && secrets.AWS_SECRET_ACCESS_KEY != '' && secrets.AWS_REGION != '' }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          # Take a few representative files to keep tokens under control
          FILES=$(find . -type f \( -name "*.js" -o -name "*.ts" -o -name "*.py" \) | head -n 5 || true)

          CODE_BUNDLE=""
          for f in $FILES; do
            CODE_BUNDLE="$CODE_BUNDLE\n--- FILE: $f ---\n$(sed -n '1,120p' "$f")\n"
          done

          # Build prompt using jq for safe JSON
          jq -n --arg code "$CODE_BUNDLE" \
            '{
              inputText: "You are a senior security engineer. Perform SAST-style review on the following code. Identify issues (CWE if possible), risk, and propose safe patches using unified diff chunks when helpful. Be concise.\n\n" + $code,
              textGenerationConfig: { maxTokenCount: 900, temperature: 0.3, topP: 0.9 }
            }' > bedrock_code_prompt.json

          aws bedrock-runtime invoke-model \
            --region "$AWS_REGION" \
            --model-id amazon.titan-text-lite-v1 \
            --body fileb://bedrock_code_prompt.json \
            bedrock_code_response.json

          echo "ai_code<<EOF" >> $GITHUB_OUTPUT
          jq -r '.results[0].outputText' bedrock_code_response.json || echo "No AI code review available"
          echo "EOF" >> $GITHUB_OUTPUT

      # ---------- Upload raw artifacts (useful for audit/debug) ----------
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: devsecops-artifacts
          path: |
            trivy-results.json
            semgrep.json
            sca_report.md
            sast_report.md
            bedrock_sca_response.json
            bedrock_code_response.json
          if-no-files-found: ignore

      # ---------- Unified PR dashboard ----------
      - name: Post unified PR dashboard
        uses: marocchino/sticky-pull-request-comment@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          header: devsecops-unified
          message: |
            ## üîê DevSecOps Unified Report

            **Commit:** `${{ env.HEAD_SHA }}`

            ### üì¶ SCA ‚Äì Dependency Vulnerabilities (Trivy)
            ${{ steps.sca_table.outputs.sca }}

            <details>
            <summary>üß† AI Vulnerability Review (Bedrock Titan)</summary>

            ${{ steps.ai_vuln.outputs.ai_sca }}
            </details>

            ---

            ### üß© SAST ‚Äì Static Analysis (Semgrep)
            ${{ steps.sast_table.outputs.sast }}

            <details>
            <summary>ü§ñ AI Static Code Review (Bedrock Titan)</summary>

            ${{ steps.ai_code.outputs.ai_code }}
            </details>

            ---

            _Inline comments added for up to 10 SAST findings._
