name: AI DevSecOps MVP

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  devsecops-scan:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: fs
          ignore-unfixed: true
          format: json
          output: trivy-results.json

      # Save raw Trivy JSON as report.md
      - name: Save vulnerability report
        id: vuln_report
        run: |
          echo "## üîç Raw Vulnerability Report" > report.md
          echo "" >> report.md
          cat trivy-results.json >> report.md

          # Escape for GitHub Actions output
          content=$(cat report.md)
          content="${content//'%'/'%25'}"
          content="${content//$'\n'/'%0A'}"
          content="${content//$'\r'/'%0D'}"
          echo "report=$content" >> $GITHUB_OUTPUT

      - name: Generate AI explanation
        id: ai_explain
        run: |
          content=$(cat trivy-results.json)
          if [ -z "$content" ]; then
            echo "ai_response=No vulnerabilities JSON found" >> $GITHUB_OUTPUT
          else
            prompt="Summarize this Trivy vulnerability scan JSON in plain English. Show package, CVE, severity, installed version, and fixed version:\n\n$content"
            response=$(curl -s https://api.openai.com/v1/chat/completions \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer ${{ secrets.OPENAI_API_KEY }}" \
              -d "{
                \"model\": \"gpt-4o-mini\",
                \"messages\": [{\"role\": \"user\", \"content\": \"$prompt\"}]
              }" | jq -r '.choices[0].message.content // "AI explanation not available"')
            
            echo "ai_response<<EOF" >> $GITHUB_OUTPUT
            echo "$response" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi

      - name: Post PR Comment
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: devsecops-scan
          message: |
            ## üõ°Ô∏è AI DevSecOps Scan Summary
            ‚úÖ Dependency scan completed.

            ### üìä Vulnerability Report
            ${{ steps.vuln_report.outputs.report }}

            ### ü§ñ AI Explanation
            ${{ steps.ai_explain.outputs.ai_response }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
