name: DevSecOps Scan with Report

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pull-requests: write

jobs:
  trivy-scan:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Trivy
        run: |
          sudo apt-get update
          sudo apt-get install -y wget apt-transport-https gnupg lsb-release jq curl
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install -y trivy

      - name: Run Trivy scan
        run: |
          trivy fs --ignore-unfixed --format json --output trivy-results.json .

      - name: Generate Markdown Report
        id: generate_report
        run: |
          echo "| Package | Version | CVE | Severity | Reference |" > report.md
          echo "|---------|---------|-----|----------|-----------|" >> report.md

          jq -r '
            .Results[].Vulnerabilities[]? |
            "| \(.PkgName) | \(.InstalledVersion) | \(.VulnerabilityID) | \(.Severity) | [Link](\(.PrimaryURL)) |"
          ' trivy-results.json >> report.md || echo "No vulnerabilities found" >> report.md

          content=$(cat report.md)
          content="${content//'%'/'%25'}"
          content="${content//$'\n'/'%0A'}"
          content="${content//$'\r'/'%0D'}"
          echo "report=$content" >> $GITHUB_OUTPUT

      - name: AI Explanation (optional)
        id: ai_explanation
        if: env.OPENAI_API_KEY != ''
        run: |
          # Take top 5 vulns for context
          summary=$(jq -r '.Results[].Vulnerabilities[]? | "\(.PkgName)@\(.InstalledVersion) - \(.Title) (Severity: \(.Severity))"' trivy-results.json | head -n 5)
          ai=$(curl -s -X POST "https://api.openai.com/v1/chat/completions" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $OPENAI_API_KEY" \
            -d "{
              \"model\": \"gpt-4o-mini\",
              \"messages\": [{\"role\": \"user\", \"content\": \"Explain these vulnerabilities in simple terms and how to fix them:\n$summary\"}]
            }" | jq -r '.choices[0].message.content // "AI explanation not available"')
          ai="${ai//'%'/'%25'}"
          ai="${ai//$'\n'/'%0A'}"
          ai="${ai//$'\r'/'%0D'}"
          echo "ai=$ai" >> $GITHUB_OUTPUT
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

      - name: Post PR Comment
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: trivy-scan
          message: |
            ## âœ… Dependency Scan Completed

            ðŸ“Š **Vulnerability Report**
            ${{ steps.generate_report.outputs.report }}

            ðŸ¤– **AI Explanation**
            ${{ steps.ai_explanation.outputs.ai }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
