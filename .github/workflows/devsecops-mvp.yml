name: DevSecOps Scan with Bedrock AI

on:
  workflow_dispatch:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pull-requests: write 

jobs:
  trivy-scan:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install tools
        run: |
          sudo apt-get update
          sudo apt-get install -y wget apt-transport-https gnupg lsb-release jq curl unzip
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install -y trivy

      # 1. Run Trivy to detect vulnerabilities
      - name: Run Trivy scan
        run: |
          trivy fs --ignore-unfixed --format json --output trivy-results.json .

      # 2. Generate Markdown report of vulnerabilities
      - name: Generate Markdown Report
        id: generate_report
        run: |
          {
            echo "| Package | Version | CVE | Severity | Reference |"
            echo "|---------|---------|-----|----------|-----------|"
            jq -r '
              .Results[].Vulnerabilities[]? |
              "| \(.PkgName) | \(.InstalledVersion) | \(.VulnerabilityID) | \(.Severity) | [Link](\(.PrimaryURL)) |"
            ' trivy-results.json
          } > report.md

          echo "report<<EOF" >> $GITHUB_OUTPUT
          cat report.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      # 3. AI Vulnerability Explanation with Titan
      - name: AI Vulnerability Review (Titan)
        id: ai_vuln
        run: |
          # Collect top 5 CVEs into plain text
          summary=$(jq -r '.Results[].Vulnerabilities[]? |
            "\(.PkgName)@\(.InstalledVersion): \(.Title) (Severity: \(.Severity), Fix: \(.FixedVersion))"' \
            trivy-results.json | head -n 5)

          # Build safe JSON body for Titan
          jq -n --arg text "$summary" \
            '{
              inputText: "Explain these vulnerabilities in simple terms with recommended fixes:\n\($text)",
              textGenerationConfig: {
                maxTokenCount: 500,
                temperature: 0.7,
                topP: 0.9
              }
            }' > vuln_prompt.json

          # Call Bedrock Titan
          aws bedrock-runtime invoke-model \
            --region $AWS_REGION \
            --model-id amazon.titan-text-lite-v1 \
            --body fileb://vuln_prompt.json \
            response.json

          # Extract AI explanation
          ai_exp=$(jq -r '.results[0].outputText' response.json)

          # ‚úÖ Safe multiline output for GitHub Actions
          {
            echo "ai<<EOF"
            echo "$ai_exp"
            echo "EOF"
          } >> $GITHUB_OUTPUT
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}



      # 4. AI Static Code Review with Titan
      - name: AI Static Code Review (Titan)
        id: ai_code
        run: |
          # Collect a few JS/TS files (avoid broken pipe error)
          files=$(find . -type f \( -name "*.js" -o -name "*.ts" \) | head -n 3 || true)

          code_snippets=""
          for f in $files; do
            code_snippets="$code_snippets\n--- File: $f ---\n$(head -n 50 "$f")\n"
          done

          # Escape dangerous chars for JSON
          safe_code=$(printf '%s' "$code_snippets" | jq -Rs .)

          # Build JSON body for Titan
          jq -n --arg code "$safe_code" \
            '{
              inputText: "Review the following code for security vulnerabilities and suggest safer alternatives:\n\($code)",
              textGenerationConfig: {
                maxTokenCount: 700,
                temperature: 0.7,
                topP: 0.9
              }
            }' > code_prompt.json

          # Call Bedrock Titan
          aws bedrock-runtime invoke-model \
            --region $AWS_REGION \
            --model-id amazon.titan-text-lite-v1 \
            --body fileb://code_prompt.json \
            code_response.json

          # Extract AI explanation
          ai_review=$(jq -r '.results[0].outputText' code_response.json)

          # ‚úÖ Safe multiline output
          {
            echo "review<<EOF"
            echo "$ai_review"
            echo "EOF"
          } >> $GITHUB_OUTPUT
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}


      # 5. Post results to PR
      - name: Post PR Comment
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: trivy-scan
          message: |
            ## ‚úÖ Dependency Scan Completed

            üìä **Vulnerability Report**
            ${{ steps.generate_report.outputs.report }}

            ü§ñ **AI Vulnerability Review (Titan)**
            ${{ steps.ai_vuln.outputs.ai }}

            üîç **AI Static Code Review (Titan)**
            ${{ steps.ai_code.outputs.review }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
