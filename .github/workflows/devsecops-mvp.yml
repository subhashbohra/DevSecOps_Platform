name: AI DevSecOps MVP

on:
  pull_request:
    types: [opened, synchronize, reopened]
permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  devsecops-scan:
    runs-on: ubuntu-latest

    steps:
      # Checkout repo
      - name: Checkout code
        uses: actions/checkout@v4

      # Setup Node.js for dependency scanning (can extend for Python, Java, etc.)
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      # Install deps (safe mode, no audit fix)
      - name: Install dependencies
        run: npm install --ignore-scripts

      # Run npm audit (SCA scan)
      - name: Run dependency audit
        run: npm audit --json > audit.json || true
      # Run trivy Scan 
      - name: Run Trivy scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: fs
          ignore-unfixed: true
          format: json
          output: trivy-results.json


      # Parse audit report into Markdown table
      - name: Generate vulnerability report
        run: |
          echo "## üîç Dependency Vulnerability Report" > report.md
          echo "" >> report.md
          jq -r '
            .advisories[] |
            "| \(.module_name) | \(.id) | \(.severity) | \(.title) | \(.recommendation) |"
          ' audit.json >> report.md || echo "No vulnerabilities found." >> report.md
      - name: Read vulnerability report
        id: vuln_report
        run: |
          content=$(cat report.md)
          # Escape newlines for GitHub Actions output
          content="${content//'%'/'%25'}"
          content="${content//$'\n'/'%0A'}"
          content="${content//$'\r'/'%0D'}"
          echo "report=$content" >> $GITHUB_OUTPUT

      # AI Explanation step (requires OPENAI_API_KEY in repo/org secrets)
      - name: AI Vulnerability Review (Titan)
        id: ai_vuln
        run: |
          # Collect top 5 CVEs into plain text
          summary=$(jq -r '.Results[].Vulnerabilities[]? |
            "\(.PkgName)@\(.InstalledVersion): \(.Title) (Severity: \(.Severity), Fix: \(.FixedVersion))"' \
            trivy-results.json | head -n 5)

          # Encode to base64 so JSON is always valid
          encoded=$(echo "$summary" | base64 -w0)

          # Decode inside the prompt using jq (safer JSON construction)
          jq -n --arg text "$(echo "$encoded" | base64 -d)" \
            '{
              inputText: "Explain these vulnerabilities in simple terms with recommended fixes:\n" + $text,
              textGenerationConfig: {
                maxTokenCount: 500,
                temperature: 0.7,
                topP: 0.9
              }
            }' > vuln_prompt.json

          # Call Bedrock Titan
          aws bedrock-runtime invoke-model \
            --region $AWS_REGION \
            --model-id amazon.titan-text-lite-v1 \
            --body fileb://vuln_prompt.json \
            response.json

          # Extract result
          echo "ai=$(jq -r '.results[0].outputText' response.json)" >> $GITHUB_OUTPUT
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}


      # Create PR comment with dashboard
      - name: Post PR Comment
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: devsecops-scan
          message: |
            ## üõ°Ô∏è AI DevSecOps Scan Summary
            ‚úÖ Dependency scan completed.

            ### üìä Vulnerability Report
            ${{ steps.vuln_report.outputs.report }}

            ### ü§ñ AI Explanation
            ${{ steps.ai_explain.outputs.ai_response }}
        env:
          GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}

      # Auto-fix dependencies (optional safe updates)
      - name: Auto-fix dependencies
        run: |
          npm audit fix || true
          if [[ `git status --porcelain` ]]; then
            git config user.name "github-actions[bot]"
            git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
            git checkout -b fix/dependency-updates || git checkout fix/dependency-updates
            git add .
            git commit -m "chore: auto-fix dependencies"
            git push origin HEAD
          fi
